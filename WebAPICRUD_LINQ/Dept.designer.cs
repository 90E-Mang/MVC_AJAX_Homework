#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAPICRUD_LINQ
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="kosaDB")]
	public partial class DeptDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 확장성 메서드 정의
    partial void OnCreated();
    partial void InsertDEPT(DEPT instance);
    partial void UpdateDEPT(DEPT instance);
    partial void DeleteDEPT(DEPT instance);
    #endregion
		
		public DeptDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["kosaDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DeptDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DeptDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DeptDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DeptDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DEPT> DEPT
		{
			get
			{
				return this.GetTable<DEPT>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DEPT")]
	public partial class DEPT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DEPTNO;
		
		private string _DNAME;
		
		private string _LOC;
		
    #region 확장성 메서드 정의
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDEPTNOChanging(int value);
    partial void OnDEPTNOChanged();
    partial void OnDNAMEChanging(string value);
    partial void OnDNAMEChanged();
    partial void OnLOCChanging(string value);
    partial void OnLOCChanged();
    #endregion
		
		public DEPT()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DEPTNO", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DEPTNO
		{
			get
			{
				return this._DEPTNO;
			}
			set
			{
				if ((this._DEPTNO != value))
				{
					this.OnDEPTNOChanging(value);
					this.SendPropertyChanging();
					this._DEPTNO = value;
					this.SendPropertyChanged("DEPTNO");
					this.OnDEPTNOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DNAME", DbType="VarChar(14)")]
		public string DNAME
		{
			get
			{
				return this._DNAME;
			}
			set
			{
				if ((this._DNAME != value))
				{
					this.OnDNAMEChanging(value);
					this.SendPropertyChanging();
					this._DNAME = value;
					this.SendPropertyChanged("DNAME");
					this.OnDNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LOC", DbType="VarChar(13)")]
		public string LOC
		{
			get
			{
				return this._LOC;
			}
			set
			{
				if ((this._LOC != value))
				{
					this.OnLOCChanging(value);
					this.SendPropertyChanging();
					this._LOC = value;
					this.SendPropertyChanged("LOC");
					this.OnLOCChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
